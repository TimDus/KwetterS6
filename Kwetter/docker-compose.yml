version: "3.2"

networks:
  backend:
  frontend:
  rabbitmq:
    

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    command: [ "bash", "-c", "chmod 400 /var/lib/rabbitmq/.erlang.cookie; rabbitmq-server" ]
    networks:
      - rabbitmq
    healthcheck:
        test: rabbitmq-diagnostics -q ping
        interval: 10s
        timeout: 10s
        retries: 3
    depends_on:
      - followdb
      - kweetdb
      - customerdb
      - feeddb
      - moderationdb

  kweetapi:
    image: timdus/kweetapi:latest
    ports:
      - 8102:80
    networks:
      - backend
      - rabbitmq 
    env_file: docker.env
    depends_on:
      rabbitmq: 
        condition: service_healthy

  kweetdb:
    container_name: kweet-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
     - ACCEPT_EULA=Y
     - SA_PASSWORD=Test123!
    networks:
     - backend
    ports:
     - 8002:1433

  customerapi:
    image: timdus/customerapi:latest
    ports:
      - 8101:80
    networks:
      - backend
      - rabbitmq 
    env_file: docker.env
    depends_on:
      rabbitmq: 
        condition: service_healthy

  customerdb:
    container_name: customer-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
     - ACCEPT_EULA=Y
     - SA_PASSWORD=Test123!
    networks:
     - backend
    ports:
     - 8001:1433

  followapi:
    image: timdus/followapi:latest
    ports:
      - 8103:80
    networks:
      - backend
      - rabbitmq 
    env_file: docker.env
    depends_on:
      rabbitmq: 
        condition: service_healthy

  followdb:
    container_name: follow-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
     - ACCEPT_EULA=Y
     - SA_PASSWORD=Test123!
    networks:
     - backend
    ports:
     - 8003:1433
  
  feedapi:
    image: timdus/feedapi:latest
    ports:
      - 8104:80
    networks:
      - backend
      - rabbitmq 
    env_file: docker.env
    depends_on:
      rabbitmq: 
        condition: service_healthy

  feeddb:
    container_name: feed-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
     - ACCEPT_EULA=Y
     - SA_PASSWORD=Test123!
    networks:
     - backend
    ports:
     - 8004:1433

  moderationapi:
    image: timdus/moderationapi:latest
    ports:
      - 8105:80
    networks:
      - backend
      - rabbitmq 
    env_file: docker.env
    depends_on:
      rabbitmq: 
        condition: service_healthy

  moderationdb:
    container_name: moderation-db
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
     - ACCEPT_EULA=Y
     - SA_PASSWORD=Test123!
    networks:
     - backend
    ports:
     - 8005:1433

  apigateway:
    image: timdus/kwettergateway:latest
    ports:
      - 8100:80
    networks:
      - backend
      - frontend
    environment:
     - DOCKER=Docker
     - ASPNETCORE_ENVIRONMENT=Production

  kwetterfront:
    image: timdus/kwetterfront:latest
    ports:
      - 3000:80
    networks:
      - frontend
    environment:
     - PORT=80
     - HTTPS=false
     - SSL_CRT_FILE=./.certs/crt.pem
     - SSL_KEY_FILE=./.certs/key.pem
     ## Set the ip if nessecery. API logic will take the current ip if false.
     - REACT_APP_API_CUSTOM_IP=true
     - REACT_APP_API_IP=apigateway
     ## Set the port
     - REACT_APP_API_PORT=:8100
     ## Set the https if nessecery. API logic will take the current http if false.
     - REACT_APP_API_HTTPS=false